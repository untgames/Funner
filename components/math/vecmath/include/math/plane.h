#ifndef MATHLIB_VECMATH_PLANE_HEADER
#define MATHLIB_VECMATH_PLANE_HEADER

#include <cmath>

#ifdef _MSC_VER
  #pragma pack (push, 1)
#endif

namespace math
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Plane side
///////////////////////////////////////////////////////////////////////////////////////////////////
enum plane_side
{
  plane_side_none,         //plane itself
  plane_side_positive,     //upper half-plane
  plane_side_negative,     //under half-plane
  plane_side_both          //both half-plance
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Plane
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
class plane
{
  public:
    typedef T                  value_type;
    typedef math::vector<T, 3> vec_type;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors
///////////////////////////////////////////////////////////////////////////////////////////////////
    plane ();
    plane (const vec_type& normal, const value_type& d);
    plane (const value_type& a, const value_type& b, const value_type& c, const value_type& d);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Parameters
///////////////////////////////////////////////////////////////////////////////////////////////////
    const vec_type& normal () const;
    vec_type&       normal ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Indexing
///////////////////////////////////////////////////////////////////////////////////////////////////
    value_type&       operator [] (unsigned int index);
    const value_type& operator [] (unsigned int index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Comparison
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const plane&) const;
    bool operator != (const plane&) const;

  public:
    value_type a, b, c, d;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Types definition
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef plane<int>    planei;
typedef plane<float>  planef;
typedef plane<double> planed;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Comparison
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
bool equal (const plane<T>&, const plane<T>&, const T& eps);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get normalized plane
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
plane<T> normalize (const plane<T>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get distance from point to plane
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
typename plane<T>::value_type distance (const plane<T>&, const vector<T, 3>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get projection of vector on plane
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
vector<T, 3> project (const plane<T>&, const vector<T, 3>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get side where point is located relative to plane
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
plane_side side (const plane<T>&, const vector<T, 3>&, const T& eps = T (0));

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get intersection point of ray and plane
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
bool intersect (const plane<T>&, const vector<T, 3>& ray_start, const vector<T, 3>& ray_dir, float& scale, const T& eps = T (0));

#include <math/detail/plane.inl>

}

#ifdef _MSC_VER
  #pragma pack(pop)
#endif

#endif
