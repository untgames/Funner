#ifndef XTL_RATIONAL_HEADER
#define XTL_RATIONAL_HEADER

#include <exception>

namespace xtl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исключение при попытке создать неверное рациональное число (делитель равен 0)
///////////////////////////////////////////////////////////////////////////////////////////////////
class bad_rational: public std::exception
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сообщение
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* what () const throw () { return "bad rational"; }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Рациональное число
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class I> class rational
{
  typedef bool (rational::*unspecified_bool_type)() const;  
  public:
    typedef I int_type;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы
///////////////////////////////////////////////////////////////////////////////////////////////////
    rational ();
    rational (int_type n);
    rational (int_type n, int_type d);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////    
    rational& operator = (int_type n);
    rational& assign     (int_type n, int_type d);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    int_type numerator   () const;
    int_type denominator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Арифметические операции
///////////////////////////////////////////////////////////////////////////////////////////////////
    rational& operator += (const rational& r);
    rational& operator -= (const rational& r);
    rational& operator *= (const rational& r);
    rational& operator /= (const rational& r);
    rational& operator += (int_type i);
    rational& operator -= (int_type i);
    rational& operator *= (int_type i);
    rational& operator /= (int_type i);
    rational  operator +  (const rational& r) const;
    rational  operator -  (const rational& r) const;
    rational  operator *  (const rational& r) const;
    rational  operator /  (const rational& r) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Инкремент / декремент
///////////////////////////////////////////////////////////////////////////////////////////////////
    const rational& operator ++ ();
    const rational& operator -- ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Унарные операции
///////////////////////////////////////////////////////////////////////////////////////////////////
    rational operator + () const;
    rational operator - () const;

    bool operator ! () const;

    operator unspecified_bool_type () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////    
    bool operator <  (const rational& r) const;
    bool operator >  (const rational& r) const;
    bool operator <= (const rational& r) const;
    bool operator >= (const rational& r) const;
    bool operator == (const rational& r) const;
    bool operator != (const rational& r) const;
    bool operator <  (int_type r) const;
    bool operator >  (int_type r) const;
    bool operator <= (int_type r) const;
    bool operator >= (int_type r) const;
    bool operator == (int_type r) const;
    bool operator != (int_type r) const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение типов
///////////////////////////////////////////////////////////////////////////////////////////////////
    template <class T> T cast () const;

  private:
    int_type n, d;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Арифметические операции
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class I, class II> rational<I> operator + (I value, const rational<II>&);
template <class I, class II> rational<I> operator - (I value, const rational<II>&);
template <class I, class II> rational<I> operator * (I value, const rational<II>&);
template <class I, class II> rational<I> operator / (I value, const rational<II>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Логические операции
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class I, class II> bool operator <  (I value, const rational<II>&);
template <class I, class II> bool operator >  (I value, const rational<II>&);
template <class I, class II> bool operator <=  (I value, const rational<II>&);
template <class I, class II> bool operator >=  (I value, const rational<II>&);
template <class I, class II> bool operator ==  (I value, const rational<II>&);
template <class I, class II> bool operator !=  (I value, const rational<II>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение абсолютного значения
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class I> rational<I> abs (const rational<I>& r);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Приведение типов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T, class I> T rational_cast (const rational<I>& r);

#include <xtl/detail/rational.inl>

}

#endif
