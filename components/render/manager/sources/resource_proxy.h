///implementation forwards
template <class Ptr> class  ResourceProxyManager;
template <class Ptr> struct ResourceProxyManagerImpl;
template <class Ptr> struct ResourceProxyImpl;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прокси объект для хранения ссылки на именованный ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Ptr> class ResourceProxy
{
  friend class ResourceProxyManager<Ptr>;
  public:
    typedef Ptr                           Pointer;
    typedef ResourceProxyManager<Pointer> Manager;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceProxy  (const ResourceProxy&);
    ~ResourceProxy ();

    ResourceProxy& operator = (const ResourceProxy&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Является ли данный ресурс ресурсом по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsDefaultResource ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение данных
///////////////////////////////////////////////////////////////////////////////////////////////////
    Pointer     Resource    ();     
    void        SetResource (const Pointer&);
    const char* Name        ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Связывание со списком обновления кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachCacheHolder (CacheHolder&);
    void DetachCacheHolder (CacheHolder&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновления кэша / сброс кэша
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCache ();
    void ResetCache  ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const ResourceProxy&);
    bool operator != (const ResourceProxy&);

  private:
    typedef ResourceProxyManagerImpl<Ptr> ManagerImpl;
    typedef ResourceProxyImpl<Ptr>        Impl;    
  
    ResourceProxy (Impl*);
    ResourceProxy (ManagerImpl&, const char* name);
    
    void SetDefaultResource (const Pointer&);

  private:  
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер прокси объектов для хранения ссылок на именованный ресурс
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Ptr> class ResourceProxyManager: public xtl::noncopyable
{
  public:
    typedef Ptr                Pointer;
    typedef ResourceProxy<Ptr> Proxy;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    ResourceProxyManager  ();
    ~ResourceProxyManager ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение прокси объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
    Proxy GetProxy (const char* name); //создание нового, в случае отсутствия
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск ресурса
///////////////////////////////////////////////////////////////////////////////////////////////////    
    Pointer FindResource (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка объекта по умолчанию
///////////////////////////////////////////////////////////////////////////////////////////////////
    void    SetDefaultResource (const Pointer&);
    Pointer DefaultResource    ();    
  
  private:
    typedef ResourceProxyManagerImpl<Ptr> Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Возможные прокси ресурсы
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef ResourceProxy<TexturePtr>              TextureProxy;
typedef ResourceProxy<LowLevelSamplerStatePtr> SamplerProxy;
typedef ResourceProxy<LowLevelTextureDescPtr>  TextureDescProxy;
typedef ResourceProxy<PrimitivePtr>            PrimitiveProxy;
typedef ResourceProxy<MaterialPtr>             MaterialProxy;
typedef ResourceProxy<ProgramPtr>              ProgramProxy;
typedef ResourceProxy<EffectPtr>               EffectProxy;
typedef ResourceProxy<LowLevelBlendStatePtr>   BlendStateProxy;
typedef TextureProxy::Manager                  TextureProxyManager;
typedef SamplerProxy::Manager                  SamplerProxyManager;
typedef TextureDescProxy::Manager              TextureDescProxyManager;
typedef PrimitiveProxy::Manager                PrimitiveProxyManager;
typedef MaterialProxy::Manager                 MaterialProxyManager;
typedef ProgramProxy::Manager                  ProgramProxyManager;
typedef EffectProxy::Manager                   EffectProxyManager;
typedef BlendStateProxy::Manager               BlendStateProxyManager;
