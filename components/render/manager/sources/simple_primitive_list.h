///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс группы простых примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
class SimplePrimitiveListImplBase: public DynamicPrimitivePrototype
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void        SetMaterial (const char* material) = 0;
    virtual const char* Material    () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Статический примитив рендеринга
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual manager::RendererPrimitive* StandaloneRendererPrimitive () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Базовый класс группы простых примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class SimplePrimitiveListImpl: virtual public SimplePrimitiveListImplBase
{
  public:
    typedef T Item;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Size () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление / обновление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t Add    (size_t count, const Item* items) = 0;
    virtual void   Update (size_t first, size_t count, const Item* items) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove (size_t first, size_t count) = 0;
    virtual void Clear  () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервируемое пространство
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void   Reserve  (size_t count) = 0;
    virtual size_t Capacity () = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание групп простых примитивов
///////////////////////////////////////////////////////////////////////////////////////////////////
LineListImpl*   create_standalone_line_list   (const MaterialManagerPtr&, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
SpriteListImpl* create_standalone_sprite_list (const MaterialManagerPtr&, SpriteMode mode, const math::vec3f& up, MeshBufferUsage vb_usage, MeshBufferUsage ib_usage);
LineListImpl*   create_batching_line_list     (const BatchingManagerPtr&, const MaterialManagerPtr&);
SpriteListImpl* create_batching_sprite_list   (const BatchingManagerPtr&, const MaterialManagerPtr&, SpriteMode mode, const math::vec3f& up);
