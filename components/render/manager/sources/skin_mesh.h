///////////////////////////////////////////////////////////////////////////////////////////////////
///Список соединений объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
class EntityJointList: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EntityJointList ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () { return transformations.size (); }
    void   Resize (size_t joints_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Трансформации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f* Transformations   ();
    void               SetTransformation (size_t joint_index, const math::mat4f& tm);
    const math::mat4f& Transformation    (size_t joint_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ревизия обновления
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t UpdateRevisionId () { return update_revision_id; }

  private:
    typedef stl::vector<math::mat4f> MatrixArray;

  private:
    MatrixArray transformations;
    size_t      update_revision_id;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер скин-меша
///////////////////////////////////////////////////////////////////////////////////////////////////
class SkinVertexBuffer: public Object
{
  public: 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SkinVertexBuffer (const DeviceManagerPtr&, const VertexBufferPtr&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение вершинного потока
///////////////////////////////////////////////////////////////////////////////////////////////////
    const LowLevelBufferPtr& VertexStream () { return vertex_stream; }
    int                      VertexStreamIndex () { return vertex_stream_index; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (EntityJointList& joints);

  private:
    VertexBufferPtr     vertex_buffer;
    LowLevelBufferPtr   vertex_stream;
    size_t              vertices_count;
    SkinVertex*         vertex_cache;
    const VertexWeight* vertex_weights;
    int                 vertex_stream_index;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Динамический примитив для скин-меша
///////////////////////////////////////////////////////////////////////////////////////////////////
class SkinDynamicPrimitive: public DynamicPrimitive
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SkinDynamicPrimitive (const VertexBufferPtr& vertex_buffer, EntityImpl& entity); //без захвата владения entity

  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateOnPrerenderCore (EntityImpl& in_entity);
    void UpdateOnRenderCore    (FrameImpl& frame, EntityImpl& entity, RenderingContext& context, const math::mat4f& mvp_matrix) {}

  private:
    typedef xtl::intrusive_ptr<SkinVertexBuffer> SkinVertexBufferPtr;

  private:
    EntityImpl&         entity; //should not be retained
    SkinVertexBufferPtr skin_vertex_buffer;
    size_t              cached_update_revision_id;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Прототип skin меша
///////////////////////////////////////////////////////////////////////////////////////////////////
class SkinVertexBufferPrototype: public DynamicPrimitivePrototype
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SkinVertexBufferPrototype (VertexBuffer& in_vertex_buffer, const DeviceManagerPtr& in_device_manager);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
    manager::VertexBuffer& VertexBuffer() { return vertex_buffer; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание экземпляра
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicPrimitive* CreateDynamicPrimitiveInstance (EntityImpl& entity);

  private:
    manager::VertexBuffer&  vertex_buffer;  //ссылка на вершинный буфер (without ownership)
    DeviceManagerPtr        device_manager; //менеджер устройства отрисовки
};
