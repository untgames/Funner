///////////////////////////////////////////////////////////////////////////////////////////////////
///Список соединений объекта
///////////////////////////////////////////////////////////////////////////////////////////////////
class EntityJointList: public Object
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    EntityJointList ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество соединений
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size   () { return transformations.size (); }
    void   Resize (size_t joints_count);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Трансформации
///////////////////////////////////////////////////////////////////////////////////////////////////
    const math::mat4f* Transformations   ();
    void               SetTransformation (size_t joint_index, const math::mat4f& tm);
    const math::mat4f& Transformation    (size_t joint_index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Ревизия обновления
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t UpdateRevisionId () { return update_revision_id; }

  private:
    typedef stl::vector<math::mat4f> MatrixArray;

  private:
    MatrixArray transformations;
    size_t      update_revision_id;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер скин-меша
///////////////////////////////////////////////////////////////////////////////////////////////////
class SkinVertexBuffer: public Object
{
  public: 
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SkinVertexBuffer (low_level::IDevice&, const VertexBufferPtr&, const EntityJointListPtr&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение вершинного потока
///////////////////////////////////////////////////////////////////////////////////////////////////
    const LowLevelBufferPtr& VertexStream () { return vertex_stream; }
    int                      VertexStreamIndex () { return vertex_stream_index; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update ();

  private:
    VertexBufferPtr     vertex_buffer;
    EntityJointListPtr  joints;
    LowLevelBufferPtr   vertex_stream;
    size_t              vertices_count;
    SkinVertex*         vertex_cache;
    const VertexWeight* vertex_weights;
    int                 vertex_stream_index;
    size_t              cached_update_revision_id;
};
