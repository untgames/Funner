#ifndef RENDER_GL_DRIVER_PLATFORM_HEADER
#define RENDER_GL_DRIVER_PLATFORM_HEADER

#include <stl/auto_ptr.h>

#include <render/low_level/driver.h>

#include <shared/library.h>

namespace render
{

namespace low_level
{

namespace opengl
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Цепочка обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class SwapChain : public ISwapChain
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SwapChain ();
    ~SwapChain ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обновление размера (должно вызываться системой верхнего уровня при изменении размеров окна)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetSize (unsigned int width, unsigned int height);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на событие изменения размера
///////////////////////////////////////////////////////////////////////////////////////////////////
    typedef xtl::function<void (unsigned int width, unsigned int height)> SizeChangeHandler;

    xtl::connection RegisterSizeChangeHandler (const SizeChangeHandler& handler);

  private:
    SwapChain (const SwapChain&);              //no impl
    SwapChain& operator = (const SwapChain&);  //no impl

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс фрейм-буфера цепочки обмена
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISwapChainFrameBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение идентификатора буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual unsigned int GetFrameBufferId () = 0;

  protected:
    virtual ~ISwapChainFrameBuffer () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс слушателя событий контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
class IContextListener
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///События контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void OnSetCurrent  () {} //контекст стал текущим
    virtual void OnLostCurrent () {} //контекст перестал быть текущим

  protected:
    virtual ~IContextListener () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Интерфейс контекста OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
class IContext: virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка текущего контектса
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void MakeCurrent (ISwapChain* swap_chain) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка совместимости цепочки обмена с контекстом
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsCompatible (ISwapChain* swap_chain) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение библиотеки OpenGL
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ILibrary& GetLibrary () = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Подписка на события контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AttachListener (IContextListener*) = 0;
    virtual void DetachListener (IContextListener*) = 0;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер платформы
///////////////////////////////////////////////////////////////////////////////////////////////////
class PlatformManager
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание адаптера
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IAdapter* CreateAdapter (const char* name, const char* path, const char* init_string);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перечисление адаптеров "по умолчанию"
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void EnumDefaultAdapters (const xtl::function<void (IAdapter*)>&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание цепочки обмена и PBuffer-а
///////////////////////////////////////////////////////////////////////////////////////////////////
    static ISwapChain* CreateSwapChain (size_t adapters_count, IAdapter** adapters, const SwapChainDesc& desc);
    static ISwapChain* CreatePBuffer   (ISwapChain* source_chain, const SwapChainDesc* pbuffer_desc = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание контекста
///////////////////////////////////////////////////////////////////////////////////////////////////
    static IContext* CreateContext (ISwapChain* swap_chain);
};

}

}

}

#endif
