#ifndef RENDER_SCENE_CLIENT_IMPL_SCENE_MESH_SHARED_HEADER
#define RENDER_SCENE_CLIENT_IMPL_SCENE_MESH_SHARED_HEADER

#include <sg/mesh.h>

#include "visual_model.h"

namespace render
{

namespace scene
{

namespace client
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Статический меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class StaticMesh: public VisualModel
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    StaticMesh  (scene_graph::StaticMesh&, SceneManager&, interchange::NodeType node_type = interchange::NodeType_StaticMesh);
    ~StaticMesh ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исходный узел
///////////////////////////////////////////////////////////////////////////////////////////////////
    scene_graph::StaticMesh& SourceNode () const { return static_cast<scene_graph::StaticMesh&> (Node::SourceNode ()); }

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация синхронизации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCore (client::Context&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Скин меш
///////////////////////////////////////////////////////////////////////////////////////////////////
class SkinMesh: public StaticMesh
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    SkinMesh  (scene_graph::SkinMesh&, SceneManager&, interchange::NodeType node_type = interchange::NodeType_SkinMesh);
    ~SkinMesh ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Исходный узел
///////////////////////////////////////////////////////////////////////////////////////////////////
    scene_graph::SkinMesh& SourceNode () const { return static_cast<scene_graph::SkinMesh&> (Node::SourceNode ()); }

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Реализация синхронизации
///////////////////////////////////////////////////////////////////////////////////////////////////
    void UpdateCore (client::Context&);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

}

#endif
