#ifndef SCENE_GRAPH_CONTROLLERS_SPINE_SKELETON_VISUAL_STRUCTURE_BUILDER_HEADER
#define SCENE_GRAPH_CONTROLLERS_SPINE_SKELETON_VISUAL_STRUCTURE_BUILDER_HEADER

#include <sg/controller.h>
#include <sg/spine_skeleton.h>

namespace scene_graph
{

namespace controllers
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Spine skeleton visual structure builder controller
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpineSkeletonVisualStructureBuilder: public Controller
{
  public:
    typedef xtl::com_ptr<SpineSkeletonVisualStructureBuilder>       Pointer;
    typedef xtl::com_ptr<const SpineSkeletonVisualStructureBuilder> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Create controller
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (SpineSkeleton& skeleton, float meshes_min_z_including, float meshes_max_z_excluding);
    
  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / Destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpineSkeletonVisualStructureBuilder  (SpineSkeleton& skeleton, float meshes_min_z_including, float meshes_max_z_excluding);
    ~SpineSkeletonVisualStructureBuilder ();
    
  private:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Update
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (const TimeValue& dt);

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

}

}

#endif
