#ifndef SCENE_GRAPH_DYNAMIC_MESH_HEADER
#define SCENE_GRAPH_DYNAMIC_MESH_HEADER

#include <sg/visual_model.h>

namespace media
{

namespace geometry
{

//forward declarations
class Mesh;

}

}

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Dynamic mesh
///////////////////////////////////////////////////////////////////////////////////////////////////
class DynamicMesh: public VisualModel
{
  public:
    typedef xtl::com_ptr <DynamicMesh> Pointer;
    typedef xtl::com_ptr <const DynamicMesh> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Create model
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (const media::geometry::Mesh& mesh);
    static Pointer Create ();
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Set / get mesh
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::geometry::Mesh& Mesh    () const;
    void                         SetMesh (const media::geometry::Mesh& mesh);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Set bounding volumes
///////////////////////////////////////////////////////////////////////////////////////////////////
    using VisualModel::SetBoundBox;
    using VisualModel::SetInfiniteBounds;

    //TODO add auto bound box calculation

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / Destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicMesh  (const media::geometry::Mesh& mesh);
    DynamicMesh  ();
    ~DynamicMesh ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Method called during object visiting
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
