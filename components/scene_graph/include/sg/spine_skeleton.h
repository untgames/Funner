#ifndef SCENE_GRAPH_SPINE_SKELETON_HEADER
#define SCENE_GRAPH_SPINE_SKELETON_HEADER

#include <sg/visual_model.h>

namespace media
{

namespace spine
{

//forward declarations
class Skeleton;

}

}

namespace scene_graph
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Spine skeleton
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpineSkeleton: public VisualModel
{
  public:
    typedef xtl::com_ptr <SpineSkeleton> Pointer;
    typedef xtl::com_ptr <const SpineSkeleton> ConstPointer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Create model
///////////////////////////////////////////////////////////////////////////////////////////////////
    static Pointer Create (const media::spine::Skeleton& skeleton);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Get skeleton
///////////////////////////////////////////////////////////////////////////////////////////////////
    const media::spine::Skeleton& Skeleton () const;
          media::spine::Skeleton& Skeleton ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Invalidating visual structure (dynamic meshes child nodes)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void SetVisualStructureDirty (bool state);
    bool IsVisualStructureDirty  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Set bounding volumes
///////////////////////////////////////////////////////////////////////////////////////////////////
    using VisualModel::SetBoundBox;
    using VisualModel::SetInfiniteBounds;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / Destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    SpineSkeleton  (const media::spine::Skeleton& skeleton);
    ~SpineSkeleton ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Method called during object visiting
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AcceptCore (Visitor&);

  private:
    struct Impl;
    Impl* impl;
};

}

#endif
