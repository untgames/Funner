#ifndef MEDIALIB_RFX_MATERIAL_HEADER
#define MEDIALIB_RFX_MATERIAL_HEADER

#include <common/string.h>
#include <common/property_map.h>

#include <media/rfx/texmap.h>

namespace media
{

namespace rfx
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Материал
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{  
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор / присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material  ();
    Material  (const Material&);
    ~Material ();

    Material& operator = (const Material&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material Clone () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя материала
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name     () const;
    void        SetName  (const char* name);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя программы шейдинга (отсутствие имени - применять программу по умолчанию)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetProgram (const char* name);
    const char* Program    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Имя режима блендинга (отсутствие имени - применять режим блендинга по умолчанию)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void        SetBlendMode (const char* name);
    const char* BlendMode    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тэги
///////////////////////////////////////////////////////////////////////////////////////////////////
    void          SetTags   (const char* tags);
    void          SetTags   (const common::StringArray& tags);
    size_t        TagsCount () const;
    const char*   Tag       (size_t index) const;
    size_t        TagHash   (size_t index) const;
    const char**  Tags      () const;
    const size_t* TagHashes () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Свойства материала
///////////////////////////////////////////////////////////////////////////////////////////////////
          common::PropertyMap& Properties ();
    const common::PropertyMap& Properties () const;
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Текстурные карты
///////////////////////////////////////////////////////////////////////////////////////////////////
          size_t              TexmapCount      () const;
          media::rfx::Texmap& Texmap           (size_t index);
    const media::rfx::Texmap& Texmap           (size_t index) const;
          void                SetTexmap        (size_t index, const media::rfx::Texmap& texmap);
          size_t              AddTexmap        (const media::rfx::Texmap& texmap);
          void                RemoveTexmap     (size_t index);
          void                RemoveAllTexmaps ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Material&);

  private:
    struct Impl;
    
    Material (Impl*);
    
  private:
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Material&, Material&);

}

}

#endif
