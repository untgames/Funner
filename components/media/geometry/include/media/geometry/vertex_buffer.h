#ifndef MEDIALIB_GEOMETRY_VERTEX_BUFFER_HEADER
#define MEDIALIB_GEOMETRY_VERTEX_BUFFER_HEADER

#include <media/geometry/vertex_stream.h>

namespace media
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Вершинный буфер
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexBuffer
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexBuffer  ();
    VertexBuffer  (const VertexBuffer&);
    ~VertexBuffer ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexBuffer& operator = (const VertexBuffer&);
    
///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание копии
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexBuffer Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Идентификатор буфера (уникальный)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество массивов вершинных атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t StreamsCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexStream& Stream (uint32_t index) const;
          VertexStream& Stream (uint32_t index);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива весов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexWeightStream& Weights () const;
          VertexWeightStream& Weights ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение/отсоединение массивов
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t Attach        (VertexStream&);   //return: индекс массива
    void     Detach        (uint32_t index);  //nothrow
    void     AttachWeights (VertexWeightStream&);
    void     DetachWeights ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Очистка буфера
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();    

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вершин (минимум среди всех вершинных массивов)
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t VerticesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Суммарный размер вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t VertexSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Текущий индекс обновления
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int CurrentStructureUpdateIndex () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Объект оповещения об удалении
///////////////////////////////////////////////////////////////////////////////////////////////////
    xtl::trackable& Trackable () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexBuffer&);

  private:
    struct Impl;
    
    VertexBuffer (Impl*);
    
  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение объекта оповещения об удалении
///////////////////////////////////////////////////////////////////////////////////////////////////
xtl::trackable& get_trackable (const VertexBuffer&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexBuffer&, VertexBuffer&);

}

}

#endif
