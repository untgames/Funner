#ifndef MEDIALIB_GEOMETRY_MATERIAL_MAP_HEADER
#define MEDIALIB_GEOMETRY_MATERIAL_MAP_HEADER

#include <xtl/intrusive_ptr.h>
#include <xtl/iterator.h>

namespace media
{

namespace geometry
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Material map
///////////////////////////////////////////////////////////////////////////////////////////////////
class MaterialMap
{
  public:
    typedef xtl::iterator<uint32_t> Iterator;

    enum { INVALID_MATERIAL_ID = -1 }; //material id returned for non existing name in FindMaterialId

///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructor / destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialMap  ();
    MaterialMap  (const MaterialMap&);
    ~MaterialMap ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialMap& operator = (const MaterialMap&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Clone
///////////////////////////////////////////////////////////////////////////////////////////////////
    MaterialMap Clone () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Map id (unique)
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Getting elements
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char*   MaterialName   (uint32_t id) const;
    int32_t       FindMaterialId (const char* name) const;  //this method is slow, returns INVALID_MATERIAL_ID if material with given name not found
    Iterator      CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Adding elements
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t SetMaterial (const char* name);
    void     SetMaterial (uint32_t id, const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Removing elements
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveMaterial (const char* name);
    void RemoveMaterial (uint32_t id);
    void RemoveMaterial (Iterator iter);
    void Clear          ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (MaterialMap&);

  private:
    struct Impl;

    MaterialMap (Impl*);

  private:
    xtl::intrusive_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (MaterialMap&, MaterialMap&);

}

}

#endif
