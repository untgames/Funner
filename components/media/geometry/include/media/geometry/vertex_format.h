#ifndef MEDIALIB_GEOMETRY_VERTEX_FORMAT_HEADER
#define MEDIALIB_GEOMETRY_VERTEX_FORMAT_HEADER

#include <cstddef>
#include <common/singleton.h>

namespace media
{

namespace geometry
{

//////////////////////////////////////////////////////////////////////////////////////////////////
///Семантика атрибута вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VertexAttributeSemantic
{
  VertexAttributeSemantic_Position,  //положение
  VertexAttributeSemantic_Normal,    //нормаль
  VertexAttributeSemantic_Color,     //цвет
  VertexAttributeSemantic_TexCoord0, //каналы текстурных координат
  VertexAttributeSemantic_TexCoord1,
  VertexAttributeSemantic_TexCoord2,
  VertexAttributeSemantic_TexCoord3,
  VertexAttributeSemantic_TexCoord4,
  VertexAttributeSemantic_TexCoord5,
  VertexAttributeSemantic_TexCoord6,  
  VertexAttributeSemantic_TexCoord7,
  VertexAttributeSemantic_Influence, //индексы отрезка индексных весов
  VertexAttributeSemantic_Custom,    //пользовательский атрибут
  
  VertexAttributeSemantic_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Тип атрибута вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
enum VertexAttributeType
{
  VertexAttributeType_Float2,    //вектор из 2-х вещественных величин
  VertexAttributeType_Float3,    //вектор из 3-х вещественных величин
  VertexAttributeType_Float4,    //вектор из 4-х вещественных величин
  VertexAttributeType_Short2,    //вектор из 2-х целочисленных величин
  VertexAttributeType_Short3,    //вектор из 3-х целочисленных величин
  VertexAttributeType_Short4,    //вектор из 4-х целочисленных величин
  VertexAttributeType_UByte4,    //вектор из 4-х беззнаковый байт
  VertexAttributeType_Influence, //см. структуру VertexInfluence
  
  VertexAttributeType_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Атрибут вершины
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma pack(push, 1) //without packing structure is padded with 4 random bytes which brokes hash

struct VertexAttribute
{
  const char*             name;     //имя атрибута
  VertexAttributeSemantic semantic; //семантика
  VertexAttributeType     type;     //тип элементов
  uint32_t                offset;   //смещение от начала вершины
};

#pragma pack(pop)

///////////////////////////////////////////////////////////////////////////////////////////////////
///Формат вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
class VertexFormat
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструктор / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexFormat  ();
    VertexFormat  (const VertexFormat&);
    ~VertexFormat ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexFormat& operator = (const VertexFormat&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Клонирование
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexFormat Clone () const;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t AttributesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение массива атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexAttribute* Attributes () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение атрибута
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexAttribute& Attribute     (uint32_t index) const;
    const char*            AttributeName (uint32_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Резервирование количества атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void     ReserveAttributes       (uint32_t count, uint32_t name_buffer_size=0);
    uint32_t ReservedAttributesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t AddAttribute  (const char* name, VertexAttributeSemantic semantic, VertexAttributeType type, uint32_t offset); //return: индекс вершинного атрибута
    uint32_t AddAttribute  (const char* name, VertexAttributeType type, uint32_t offset); //return: индекс вершинного атрибута
    uint32_t AddAttribute  (VertexAttributeSemantic semantic, VertexAttributeType type, uint32_t offset); //return: индекс вершинного атрибута
    uint32_t AddAttributes (const VertexFormat&); //return: инедкс последнего добавленного атрибута

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление атрибутов
///////////////////////////////////////////////////////////////////////////////////////////////////
    void RemoveAttribute  (uint32_t position); //nothrow
    void RemoveAttribute  (const char* name); //nothrow
    void RemoveAttributes (VertexAttributeSemantic semantic); //nothrow
    void RemoveAttributes (const VertexFormat&);
    void Clear            (); //удаление всех атрибутов, nothrow

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перегрузка операторов
///////////////////////////////////////////////////////////////////////////////////////////////////
    VertexFormat& operator += (const VertexFormat&);
    VertexFormat& operator -= (const VertexFormat&);    
    VertexFormat  operator +  (const VertexFormat&) const;
    VertexFormat  operator -  (const VertexFormat&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск атрибута по семантике
///////////////////////////////////////////////////////////////////////////////////////////////////
    const VertexAttribute* FindAttribute (VertexAttributeSemantic semantic, const VertexAttribute* after = 0) const; //nothrow
    const VertexAttribute* FindAttribute (const char* name) const; //nothrow

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение минимального размера вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
    uint32_t GetMinimalVertexSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сериализация / десериализация
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t SerializationSize     () const;

    size_t Write (void* buffer, size_t buffer_size) const;
    size_t Read  (const void* buffer, size_t buffer_size);

    static VertexFormat CreateFromSerializedData (const void* buffer, size_t buffer_size, size_t& bytes_read);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение хэша для данного вершинного формата
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Hash () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (VertexFormat&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const VertexFormat&) const;
    bool operator != (const VertexFormat&) const;

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (VertexFormat&, VertexFormat&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение характеристик
///////////////////////////////////////////////////////////////////////////////////////////////////
const char*    get_semantic_name    (VertexAttributeSemantic); //имя семантики
const char*    get_type_name        (VertexAttributeType);     //имя типа
unsigned short get_type_size        (VertexAttributeType);     //размер типа атрибута вершин в байтах
unsigned char  get_components_count (VertexAttributeType);     //количество компонентов
bool           is_compatible        (VertexAttributeSemantic, VertexAttributeType); //проверка совместимости

//получение семантики по имени
VertexAttributeSemantic get_vertex_attribute_semantic (const char* name, VertexAttributeSemantic default_semantic=VertexAttributeSemantic_Num);

//получение типа по имени
VertexAttributeType get_vertex_attribute_type (const char* name, VertexAttributeType default_type=VertexAttributeType_Num);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение формата вершины
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Vertex>
const VertexFormat& get_vertex_format ();

#include <media/geometry/detail/vertex_format.inl>

}

}

#endif
