#ifndef MEDIALIB_PARTICLES_PARTICLE_SYSTEM_HEADER
#define MEDIALIB_PARTICLES_PARTICLE_SYSTEM_HEADER

#include <media/particles/particle_scene.h>

namespace common
{

//forward declaration
class PropertyMap;

}

namespace media
{

namespace particles
{

//forward declarations
class IParticleProcessor;
class RandomGenerator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle system
///////////////////////////////////////////////////////////////////////////////////////////////////
class ParticleSystem
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    ParticleSystem  ();
    ParticleSystem  (const RandomGenerator& random_generator);
    ParticleSystem  (const ParticleSystem&);
    ~ParticleSystem ();

    ParticleSystem& operator = (const ParticleSystem&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Scenes count
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ScenesCount () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Add / remove scenes
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t AddScene        (const ParticleScene& scene);
    void   RemoveScene     (size_t index);
    void   RemoveAllScenes ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get scene by index
///////////////////////////////////////////////////////////////////////////////////////////////////
          ParticleScene& Scene (size_t index);
    const ParticleScene& Scene (size_t index) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Attach / detach particle processors
///////////////////////////////////////////////////////////////////////////////////////////////////
    void AttachProcessor     (IParticleProcessor* processor); //for all scenes
    void DetachProcessor     (IParticleProcessor* processor);
    void DetachAllProcessors ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Update scenes
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Update (const TimeValue& time, const common::PropertyMap* properties = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ParticleSystem&);

  private:
  	struct Impl;
  	Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ParticleSystem&, ParticleSystem&);

}

}

#endif
