#ifndef MEDIALIB_PARTICLES_PARTICLE_LIST_HEADER
#define MEDIALIB_PARTICLES_PARTICLE_LIST_HEADER

#include <stl/utility>

#include <xtl/functional_fwd>
#include <xtl/rational.h>

#include <math/angle.h>
#include <math/vector.h>

namespace media
{

namespace particles
{

//forward declaration
class ParticleList;
class ParticlePool;

typedef xtl::rational<size_t> TimeValue;  //particle scene time type

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle node
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ParticleNode
{
  ParticleNode* prev;      //previous particle
  ParticleNode* next;      //next particle
  void*         pool_link; //pool link for internal usage

  ParticleNode ();
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle data
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Particle: private ParticleNode
{
  friend class ParticleList;
  template <class T1> friend class ParticleIterator;

  math::vec3f  position;               //position
  math::vec3f  position_speed;         //speed
  math::vec3f  position_acceleration;  //acceleration
  math::anglef rotation;               //rotation (particle is billboard sprite, so only one-axis rotation)
  math::anglef rotation_speed;         //rotation change speed
  math::vec2f  size;                   //size
  math::vec2f  size_speed;             //size change speed
  math::vec4f  color;                  //color
  math::vec4f  color_speed;            //color change speed
  TimeValue    creation_time;          //particle creation time
  float        lifetime;               //lifetime left
  unsigned int animation_frame;        //animation frame
  unsigned int animation_frame_offset; //offset index for animation frames

  Particle ();
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Particle iterator
/////////////////////////////////////////////////////////////////////////////////////////////
template <class T> class ParticleIterator 
{ 
  friend class ParticleList;
  template <class T1> friend class ParticleIterator;
  typedef bool (ParticleIterator::*safe_bool)() const;
  public:
    typedef typename stl::non_const_type<T>::value_type  value_type;
    typedef size_t                                       size_type;
    typedef ptrdiff_t                                    difference_type;
    typedef T*                                           pointer;
    typedef T&                                           reference;
    typedef ParticleIterator<value_type>                 iterator;
    typedef ParticleIterator<const value_type>           const_iterator;
    typedef stl::bidirectional_iterator_tag              iterator_category;

    ParticleIterator ();
    ParticleIterator (const iterator&);
    
/////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание
/////////////////////////////////////////////////////////////////////////////////////////////
    ParticleIterator& operator = (const iterator&);

/////////////////////////////////////////////////////////////////////////////////////////////
///Селекторы
/////////////////////////////////////////////////////////////////////////////////////////////
    reference operator  * () const;
    pointer   operator -> () const;

/////////////////////////////////////////////////////////////////////////////////////////////
///Инкремент / декремент
/////////////////////////////////////////////////////////////////////////////////////////////
    ParticleIterator& operator ++ ();
    ParticleIterator& operator -- ();  
    ParticleIterator  operator ++ (int);
    ParticleIterator  operator -- (int);

/////////////////////////////////////////////////////////////////////////////////////////////
///Сравнение
/////////////////////////////////////////////////////////////////////////////////////////////
    bool operator == (const ParticleIterator&) const;
    bool operator != (const ParticleIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Проверка на пустоту
///////////////////////////////////////////////////////////////////////////////////////////////////
    bool empty () const;

    operator safe_bool () const { return empty () ? 0 : &ParticleIterator::empty; }

/////////////////////////////////////////////////////////////////////////////////////////////
///Получение unqualified итератора
/////////////////////////////////////////////////////////////////////////////////////////////
    iterator get_unqualified_iterator () const;

  private:          
    ParticleIterator (ParticleNode*);

  private:  
    ParticleNode* node;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle list
///////////////////////////////////////////////////////////////////////////////////////////////////
class ParticleList
{
  public:
    typedef ParticleIterator<Particle>               Iterator;
    typedef ParticleIterator<const Particle>         ConstIterator;
    typedef xtl::function<void (Particle* particle)> ParticleInitializer;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    ParticleList  ();
    ParticleList  (size_t particle_size, const ParticleInitializer&);
    ParticleList  (const ParticlePool&);
    ParticleList  (const ParticlePool&, size_t particle_size, const ParticleInitializer&);
  	ParticleList  (const ParticleList&);
    ~ParticleList ();

    ParticleList& operator = (const ParticleList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Associated particle pool
///////////////////////////////////////////////////////////////////////////////////////////////////
    const ParticlePool& Pool () const;
          ParticlePool& Pool ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Size of particle
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t ParticleSize () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Allocated particles count
///////////////////////////////////////////////////////////////////////////////////////////////////
  	size_t Count () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Create iterator for particles
///////////////////////////////////////////////////////////////////////////////////////////////////
  	ConstIterator CreateIterator () const;
  	Iterator      CreateIterator ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Add / remove particles
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator Add    ();
    void     Remove (Iterator);
    void     Clear  ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ParticleList&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ParticleList&, ParticleList&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particles pool
///////////////////////////////////////////////////////////////////////////////////////////////////
class ParticlePool
{
  friend class ParticleList;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructos / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    ParticlePool  ();
    ParticlePool  (const ParticlePool&);
    ~ParticlePool ();

    ParticlePool& operator = (const ParticlePool&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Change/check capacity
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Capacity (size_t particle_size = sizeof (Particle)) const;
    void   Reserve  (size_t count, size_t particle_size = sizeof (Particle));
    void   Shrink   (size_t count, size_t particle_size = sizeof (Particle));

  private:
    struct Impl;
    Impl* impl;
};

#include <media/particles/detail/particle_list.inl>

}

}

#endif
