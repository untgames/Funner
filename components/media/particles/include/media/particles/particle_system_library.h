#ifndef MEDIALIB_PARTICLES_PARTICLE_SYSTEM_LIBRARY_HEADER
#define MEDIALIB_PARTICLES_PARTICLE_SYSTEM_LIBRARY_HEADER

#include <common/serializer_manager.h>

#include <media/particles/particle_system.h>

namespace xtl
{

//forward declaration
template <class T> class iterator;

}

namespace media
{

namespace particles
{

//forward declaration
class RandomGenerator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Class which is used for particle system setup
///////////////////////////////////////////////////////////////////////////////////////////////////
class IParticleSystemPrototype
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Configure particle system
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Configure (ParticleSystem& system) = 0;

//////////////////////////////////////////////////////////////////////////////////////////////////
///Reference counting
//////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void AddRef () = 0;
    virtual void Release () = 0;

  protected:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Destructor
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~IParticleSystemPrototype () {}
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle systems library
///////////////////////////////////////////////////////////////////////////////////////////////////
class ParticleSystemLibrary
{
  public:
    typedef xtl::iterator<IParticleSystemPrototype* const> Iterator, ConstIterator;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    ParticleSystemLibrary  ();
    ParticleSystemLibrary  (const ParticleSystemLibrary&);
    ParticleSystemLibrary  (const char* file_name);
    ~ParticleSystemLibrary ();

    ParticleSystemLibrary& operator = (const ParticleSystemLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Identifier
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Id () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Library name
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name    () const;
    void        SetName (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Create particle system using particle system config handler attached to given id
///////////////////////////////////////////////////////////////////////////////////////////////////
    ParticleSystem CreateParticleSystem (const char* id, const RandomGenerator& random_generator) const;
    ParticleSystem CreateParticleSystem (const char* id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Attached config handlers count / check for emptiness
///////////////////////////////////////////////////////////////////////////////////////////////////
    size_t Size    () const;
    bool   IsEmpty () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Iterators
///////////////////////////////////////////////////////////////////////////////////////////////////
    Iterator      CreateIterator ();
    ConstIterator CreateIterator () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get element identifier
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* ItemId (const ConstIterator&) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Find element
///////////////////////////////////////////////////////////////////////////////////////////////////
          IParticleSystemPrototype* Find (const char* id);
    const IParticleSystemPrototype* Find (const char* id) const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Attach / detach element
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Attach    (const char* id, const IParticleSystemPrototype&);
    void Detach    (const char* id); //no throw
    void DetachAll ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Clear library (detach all items and clear name)
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Clear ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Load / Unload
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Load (const char* file_name);
    void Unload (const char* file_name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Register default serializers
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterDefaultLoaders ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (ParticleSystemLibrary&);    

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (ParticleSystemLibrary&, ParticleSystemLibrary&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Particle system libraries manager
///////////////////////////////////////////////////////////////////////////////////////////////////
typedef common::ResourceSerializerManager
<
  void (const char* file_name, ParticleSystemLibrary& library),
  void (const char* file_name, ParticleSystemLibrary& library)
> ParticleSystemLibraryManager;

}

}

#endif
