#ifndef MEDIALIB_ATLAS_BUILDER_HEADER
#define MEDIALIB_ATLAS_BUILDER_HEADER

#include <xtl/functional_fwd>

#include <media/atlas.h>
#include <media/image.h>

namespace media
{

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим вставки изображений в построитель атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AtlasBuilderInsertMode
{
  AtlasBuilderInsertMode_Copy,      //копирование изображения при вставке
  AtlasBuilderInsertMode_Capture,   //захват изображения при вставке
  AtlasBuilderInsertMode_Reference, //хранение ссылки на изображение при вставке
  
  AtlasBuilderInsertMode_Default = AtlasBuilderInsertMode_Copy,
  
  AtlasBuilderInsertMode_Num
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Режим увеличения сторон во время построения атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
enum AtlasPackFlag
{
  AtlasPackFlag_PowerOfTwoEdges      = 1,       //стороны степени двойки
  AtlasPackFlag_InvertTilesX         = 1 << 1,  //инвертировать расположение тайлов по оси X, обрабатывается в AtlasBuilder
  AtlasPackFlag_InvertTilesY         = 1 << 2,  //инвертировать расположение тайлов по оси Y, обрабатывается в AtlasBuilder
  AtlasPackFlag_SwapAxises           = 1 << 3,  //изменить расположение осей при размещении тайлов
  AtlasPackFlag_SquareAxises         = 1 << 4,  //равные размеры осей
  AtlasPackFlag_TopRightEdgeMargin   = 1 << 5,  //использовать отступ от верхнего и правого краев картинки
  AtlasPackFlag_BottomLeftEdgeMargin = 1 << 6,  //использовать отступ от нижнего и левого краев картинки
  AtlasPackFlag_PackToMaxImageSize   = 1 << 7,  //упаковать максимально возможное количество картинок без превышения заданного размера атласа
  AtlasPackFlag_Fast                 = 1 << 8,  //быстрое сжатие
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Построитель атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilder
{
  public:
    struct PackHandlerParams
    {
      unsigned int        images_count;    //количество упаковываемых картинок
      const math::vec2ui* in_sizes;        //размеры картинок
      math::vec2ui*       out_origins;     //результирующие координаты картинок
      bool*               out_was_packed;  //для каждой картинки true - если была упакована, false - если не влезла. Может быть равен 0
      unsigned int        margin;          //отступ между картинками
      unsigned int        alignment;       //выравнивание картинок
      unsigned int        max_image_size;  //максимальный размер результирующей картинки (используется только если установлен флаг )
      unsigned int        pack_flags;      //параметры упаковки
    };

    typedef xtl::function<void (const PackHandlerParams&)> PackHandler;
  
///////////////////////////////////////////////////////////////////////////////////////////////////
///Конструкторы / деструктор
///////////////////////////////////////////////////////////////////////////////////////////////////
    AtlasBuilder  (const char* pack_handler_name = "default");
    AtlasBuilder  (const PackHandler&);
    ~AtlasBuilder ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение максимального размера одного атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetMaxImageSize (unsigned int max_image_size);
    unsigned int MaxImageSize    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение размера поля
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetMargin (unsigned int margin);
    unsigned int Margin    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение выравнивания картинок
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetAlignment (unsigned int alignment);
    unsigned int Alignment    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Установка/получение флагов упаковки
///////////////////////////////////////////////////////////////////////////////////////////////////
    void         SetPackFlags (unsigned int pack_flags);
    unsigned int PackFlags    () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Добавление изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Insert (Image&, AtlasBuilderInsertMode mode = AtlasBuilderInsertMode_Default, unsigned int tag = 0);
    void Insert (const char* image_name, bool keep_in_memory = true, unsigned int tag = 0);
    void Insert (unsigned int width, unsigned int height, PixelFormat format, const void* data, bool copy_data = true, const char* name = "", unsigned int tag = 0);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Сброс
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Reset ();

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение результатов упаковки
///////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int AtlasesCount    ();
    void   BuildAtlas      (unsigned int index, const char* atlas_image_name, Atlas& result);
    void   BuildAtlasImage (unsigned int index, Image& result);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AtlasBuilder&);

  private:
    AtlasBuilder (const AtlasBuilder&); //no impl
    AtlasBuilder& operator = (const AtlasBuilder&); //no impl

  private:
    struct Impl;
    stl::auto_ptr<Impl> impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AtlasBuilder&, AtlasBuilder&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Менеджер построителей атласа изображений
///////////////////////////////////////////////////////////////////////////////////////////////////
class AtlasBuilderManager
{
  public:
    typedef AtlasBuilder::PackHandler PackHandler;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Получение упаковщика атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    static const PackHandler& GetPacker (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Регистрация упаковщиков атласа
///////////////////////////////////////////////////////////////////////////////////////////////////
    static void RegisterPacker       (const char* name, const PackHandler& handler);
    static void UnregisterPacker     (const char* name);
    static void UnregisterAllPackers ();
};

}

#endif
