#ifndef MEDIALIB_SPINE_SHARED_SKELETON_HEADER
#define MEDIALIB_SPINE_SHARED_SKELETON_HEADER

#include <media/spine/skeleton.h>

#include <object.h>

namespace media
{

namespace spine
{

//forward declarations
class IBone;
class IMaterial;
class ISlot;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Spine animation state data
///////////////////////////////////////////////////////////////////////////////////////////////////
class ISkeleton : virtual public IObject
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Animating
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetToSetupPose      () = 0;
    virtual void ApplyAnimationState (const AnimationState& animation) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Work with bones
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IBone* RootBone () = 0;

    virtual IBone* FindBone (const char* name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Work with slots
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual unsigned int SlotsCount () = 0;
    virtual ISlot*       Slot       (unsigned int index) = 0;
    virtual ISlot*       FindSlot   (const char* name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Rendering
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual unsigned int    MeshesCount () = 0;
    virtual geometry::Mesh  Mesh        (unsigned int mesh_index) = 0;
    virtual IMaterial*      Material    (const char* name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Change skin (use 0 to set default skin)
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char* Skin          () = 0;
    virtual void        SetSkin       (const char* skin_name) = 0;
    virtual bool        SetAttachment (const char* slot_name, const char* attachment_name) = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Update transform after animation/bones manipulation
///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void UpdateWorldTransform () = 0;
};

}

}

#endif
