#ifndef MEDIALIB_SPINE_ATTACHMENT_HEADER
#define MEDIALIB_SPINE_ATTACHMENT_HEADER

namespace media
{

namespace spine
{

//forward declarations
class IAttachment;
class PointAttachment;
class Wrappers;

//Possible attachment types (some types can be casted to inherited classes)
enum AttachmentType
{
  AttachmentType_Region,
  AttachmentType_BoundingBox,
  AttachmentType_Mesh,
  AttachmentType_LinkedMesh,
  AttachmentType_Path,
  AttachmentType_Point,       //attachment of this type can be casted to PointAttachment class
  AttachmentType_Clipping
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Spine attachment
///////////////////////////////////////////////////////////////////////////////////////////////////
class Attachment
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    Attachment  (const Attachment&);
    ~Attachment ();

    Attachment& operator = (const Attachment&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Name
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Get Type and type-specific data.
///////////////////////////////////////////////////////////////////////////////////////////////////
    AttachmentType Type () const;

    template <class T> const T* AttachmentData () const;
    template <class T>       T* AttachmentData ();
    template <class T>       T  AttachmentData () const;   //throws exception in case of type mismatch

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Attachment&);

  protected:
    Attachment (IAttachment*);

  private:
    IAttachment* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Attachment&, Attachment&);

}

}

#endif
