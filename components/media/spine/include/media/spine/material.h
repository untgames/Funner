#ifndef MEDIALIB_SPINE_MATERIAL_HEADER
#define MEDIALIB_SPINE_MATERIAL_HEADER

namespace media
{

namespace spine
{

//Possible blend modes
enum BlendMode
{
  BlendMode_Normal,
  BlendMode_Additive,
  BlendMode_Multiply,
  BlendMode_Screen
};

//possible texcoord wrap modes
enum TexcoordWrap
{
  TexcoordWrap_MirroredRepeat,
  TexcoordWrap_ClampToEdfe,
  TexcoordWrap_Repeat
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Mesh material
///////////////////////////////////////////////////////////////////////////////////////////////////
class Material
{
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    Material ();
    Material (const Material&);
    ~Material ();

    Material& operator = (const Material&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Name
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name   () const;
    void        Rename (const char* name);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Params
///////////////////////////////////////////////////////////////////////////////////////////////////
    BlendMode    BlendMode       () const;
    void         SetBlendMode    (BlendMode blend_mode);
    TexcoordWrap TexcoordWrap    () const;
    void         SetTexcoordWrap (TexcoordWrap texcoord_wrap);
    const char*  TexturePath     () const;
    void         SetTexturePath  (const char* texture_path);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Material&);

  private:
    struct Impl;
    Impl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Material&, Material&);

}

}

#endif
