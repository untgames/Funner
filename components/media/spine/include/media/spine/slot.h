#ifndef MEDIALIB_SPINE_SLOT_HEADER
#define MEDIALIB_SPINE_SLOT_HEADER

#include <math/vector.h>

namespace media
{

namespace spine
{

//forward declarations
class Attachment;
class Bone;
class SlotImpl;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Spine slot
///////////////////////////////////////////////////////////////////////////////////////////////////
class Slot
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    Slot (const Slot&);
    ~Slot ();

    Slot& operator = (const Slot&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Name
///////////////////////////////////////////////////////////////////////////////////////////////////
    const char* Name () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Params
///////////////////////////////////////////////////////////////////////////////////////////////////
    math::vec4f Color () const;  //only color parameter available, darkColor parameter not available
    const Bone* Bone  () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Attachment
///////////////////////////////////////////////////////////////////////////////////////////////////
    Attachment* Attachment () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (Slot&);

  protected:
    Slot (SlotImpl*);

  private:
    SlotImpl* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (Slot&, Slot&);

}

}

#endif
