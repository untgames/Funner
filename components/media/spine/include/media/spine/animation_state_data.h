#ifndef MEDIALIB_SPINE_ANIMATION_STATE_DATA_HEADER
#define MEDIALIB_SPINE_ANIMATION_STATE_DATA_HEADER

namespace media
{

namespace spine
{

//forward declarations
class AnimationState;
class IAnimationStateData;
class Wrappers;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Spine animation state data
///////////////////////////////////////////////////////////////////////////////////////////////////
class AnimationStateData
{
  friend class Wrappers;
  public:
///////////////////////////////////////////////////////////////////////////////////////////////////
///Constructors / destructor / assignment
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationStateData  (const AnimationStateData&);
    ~AnimationStateData ();

    AnimationStateData& operator = (const AnimationStateData&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Create object instance
///////////////////////////////////////////////////////////////////////////////////////////////////
    AnimationState CreateAnimationState () const;

///////////////////////////////////////////////////////////////////////////////////////////////////
///Animation mixing
///////////////////////////////////////////////////////////////////////////////////////////////////
    float DefaultMix    () const;
    void  SetDefaultMix (float default_mix);

    float GetMix (const char* animation_from, const char* animation_to) const;
    void  SetMix (const char* animation_from, const char* animation_to, float mix);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
    void Swap (AnimationStateData&);

  private:
    AnimationStateData (IAnimationStateData*);

  private:
    IAnimationStateData* impl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///Swap
///////////////////////////////////////////////////////////////////////////////////////////////////
void swap (AnimationStateData&, AnimationStateData&);

}

}

#endif
